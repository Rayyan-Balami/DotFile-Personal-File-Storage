/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as userRouteImport } from './routes/(user)/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as adminRouteImport } from './routes/(admin)/route'
import { Route as userIndexImport } from './routes/(user)/index'
import { Route as userTrashImport } from './routes/(user)/trash'
import { Route as userRecentImport } from './routes/(user)/recent'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as adminAdminIndexImport } from './routes/(admin)/admin/index'
import { Route as userSettingProfileImport } from './routes/(user)/setting.profile'
import { Route as userFolderIdImport } from './routes/(user)/folder.$id'
import { Route as adminAdminUserImport } from './routes/(admin)/admin/user'
import { Route as adminAdminAdminImport } from './routes/(admin)/admin/admin'
import { Route as adminAdminUserIndexImport } from './routes/(admin)/admin/user.index'
import { Route as adminAdminSettingProfileImport } from './routes/(admin)/admin/setting.profile'
import { Route as adminAdminIdEditImport } from './routes/(admin)/admin/$id.edit'

// Create/Update Routes

const userRouteRoute = userRouteImport.update({
  id: '/(user)',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const adminRouteRoute = adminRouteImport.update({
  id: '/(admin)',
  getParentRoute: () => rootRoute,
} as any)

const userIndexRoute = userIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => userRouteRoute,
} as any)

const userTrashRoute = userTrashImport.update({
  id: '/trash',
  path: '/trash',
  getParentRoute: () => userRouteRoute,
} as any)

const userRecentRoute = userRecentImport.update({
  id: '/recent',
  path: '/recent',
  getParentRoute: () => userRouteRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authRouteRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)

const adminAdminIndexRoute = adminAdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => adminRouteRoute,
} as any)

const userSettingProfileRoute = userSettingProfileImport.update({
  id: '/setting/profile',
  path: '/setting/profile',
  getParentRoute: () => userRouteRoute,
} as any)

const userFolderIdRoute = userFolderIdImport.update({
  id: '/folder/$id',
  path: '/folder/$id',
  getParentRoute: () => userRouteRoute,
} as any)

const adminAdminUserRoute = adminAdminUserImport.update({
  id: '/admin/user',
  path: '/admin/user',
  getParentRoute: () => adminRouteRoute,
} as any)

const adminAdminAdminRoute = adminAdminAdminImport.update({
  id: '/admin/admin',
  path: '/admin/admin',
  getParentRoute: () => adminRouteRoute,
} as any)

const adminAdminUserIndexRoute = adminAdminUserIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => adminAdminUserRoute,
} as any)

const adminAdminSettingProfileRoute = adminAdminSettingProfileImport.update({
  id: '/admin/setting/profile',
  path: '/admin/setting/profile',
  getParentRoute: () => adminRouteRoute,
} as any)

const adminAdminIdEditRoute = adminAdminIdEditImport.update({
  id: '/admin/$id/edit',
  path: '/admin/$id/edit',
  getParentRoute: () => adminRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(admin)': {
      id: '/(admin)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof adminRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/(user)': {
      id: '/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof authRouteImport
    }
    '/(user)/recent': {
      id: '/(user)/recent'
      path: '/recent'
      fullPath: '/recent'
      preLoaderRoute: typeof userRecentImport
      parentRoute: typeof userRouteImport
    }
    '/(user)/trash': {
      id: '/(user)/trash'
      path: '/trash'
      fullPath: '/trash'
      preLoaderRoute: typeof userTrashImport
      parentRoute: typeof userRouteImport
    }
    '/(user)/': {
      id: '/(user)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userIndexImport
      parentRoute: typeof userRouteImport
    }
    '/(admin)/admin/admin': {
      id: '/(admin)/admin/admin'
      path: '/admin/admin'
      fullPath: '/admin/admin'
      preLoaderRoute: typeof adminAdminAdminImport
      parentRoute: typeof adminRouteImport
    }
    '/(admin)/admin/user': {
      id: '/(admin)/admin/user'
      path: '/admin/user'
      fullPath: '/admin/user'
      preLoaderRoute: typeof adminAdminUserImport
      parentRoute: typeof adminRouteImport
    }
    '/(user)/folder/$id': {
      id: '/(user)/folder/$id'
      path: '/folder/$id'
      fullPath: '/folder/$id'
      preLoaderRoute: typeof userFolderIdImport
      parentRoute: typeof userRouteImport
    }
    '/(user)/setting/profile': {
      id: '/(user)/setting/profile'
      path: '/setting/profile'
      fullPath: '/setting/profile'
      preLoaderRoute: typeof userSettingProfileImport
      parentRoute: typeof userRouteImport
    }
    '/(admin)/admin/': {
      id: '/(admin)/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof adminAdminIndexImport
      parentRoute: typeof adminRouteImport
    }
    '/(admin)/admin/$id/edit': {
      id: '/(admin)/admin/$id/edit'
      path: '/admin/$id/edit'
      fullPath: '/admin/$id/edit'
      preLoaderRoute: typeof adminAdminIdEditImport
      parentRoute: typeof adminRouteImport
    }
    '/(admin)/admin/setting/profile': {
      id: '/(admin)/admin/setting/profile'
      path: '/admin/setting/profile'
      fullPath: '/admin/setting/profile'
      preLoaderRoute: typeof adminAdminSettingProfileImport
      parentRoute: typeof adminRouteImport
    }
    '/(admin)/admin/user/': {
      id: '/(admin)/admin/user/'
      path: '/'
      fullPath: '/admin/user/'
      preLoaderRoute: typeof adminAdminUserIndexImport
      parentRoute: typeof adminAdminUserImport
    }
  }
}

// Create and export the route tree

interface adminAdminUserRouteChildren {
  adminAdminUserIndexRoute: typeof adminAdminUserIndexRoute
}

const adminAdminUserRouteChildren: adminAdminUserRouteChildren = {
  adminAdminUserIndexRoute: adminAdminUserIndexRoute,
}

const adminAdminUserRouteWithChildren = adminAdminUserRoute._addFileChildren(
  adminAdminUserRouteChildren,
)

interface adminRouteRouteChildren {
  adminAdminAdminRoute: typeof adminAdminAdminRoute
  adminAdminUserRoute: typeof adminAdminUserRouteWithChildren
  adminAdminIndexRoute: typeof adminAdminIndexRoute
  adminAdminIdEditRoute: typeof adminAdminIdEditRoute
  adminAdminSettingProfileRoute: typeof adminAdminSettingProfileRoute
}

const adminRouteRouteChildren: adminRouteRouteChildren = {
  adminAdminAdminRoute: adminAdminAdminRoute,
  adminAdminUserRoute: adminAdminUserRouteWithChildren,
  adminAdminIndexRoute: adminAdminIndexRoute,
  adminAdminIdEditRoute: adminAdminIdEditRoute,
  adminAdminSettingProfileRoute: adminAdminSettingProfileRoute,
}

const adminRouteRouteWithChildren = adminRouteRoute._addFileChildren(
  adminRouteRouteChildren,
)

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface userRouteRouteChildren {
  userRecentRoute: typeof userRecentRoute
  userTrashRoute: typeof userTrashRoute
  userIndexRoute: typeof userIndexRoute
  userFolderIdRoute: typeof userFolderIdRoute
  userSettingProfileRoute: typeof userSettingProfileRoute
}

const userRouteRouteChildren: userRouteRouteChildren = {
  userRecentRoute: userRecentRoute,
  userTrashRoute: userTrashRoute,
  userIndexRoute: userIndexRoute,
  userFolderIdRoute: userFolderIdRoute,
  userSettingProfileRoute: userSettingProfileRoute,
}

const userRouteRouteWithChildren = userRouteRoute._addFileChildren(
  userRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof userIndexRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/recent': typeof userRecentRoute
  '/trash': typeof userTrashRoute
  '/admin/admin': typeof adminAdminAdminRoute
  '/admin/user': typeof adminAdminUserRouteWithChildren
  '/folder/$id': typeof userFolderIdRoute
  '/setting/profile': typeof userSettingProfileRoute
  '/admin': typeof adminAdminIndexRoute
  '/admin/$id/edit': typeof adminAdminIdEditRoute
  '/admin/setting/profile': typeof adminAdminSettingProfileRoute
  '/admin/user/': typeof adminAdminUserIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof userIndexRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/recent': typeof userRecentRoute
  '/trash': typeof userTrashRoute
  '/admin/admin': typeof adminAdminAdminRoute
  '/folder/$id': typeof userFolderIdRoute
  '/setting/profile': typeof userSettingProfileRoute
  '/admin': typeof adminAdminIndexRoute
  '/admin/$id/edit': typeof adminAdminIdEditRoute
  '/admin/setting/profile': typeof adminAdminSettingProfileRoute
  '/admin/user': typeof adminAdminUserIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(admin)': typeof adminRouteRouteWithChildren
  '/(auth)': typeof authRouteRouteWithChildren
  '/(user)': typeof userRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(user)/recent': typeof userRecentRoute
  '/(user)/trash': typeof userTrashRoute
  '/(user)/': typeof userIndexRoute
  '/(admin)/admin/admin': typeof adminAdminAdminRoute
  '/(admin)/admin/user': typeof adminAdminUserRouteWithChildren
  '/(user)/folder/$id': typeof userFolderIdRoute
  '/(user)/setting/profile': typeof userSettingProfileRoute
  '/(admin)/admin/': typeof adminAdminIndexRoute
  '/(admin)/admin/$id/edit': typeof adminAdminIdEditRoute
  '/(admin)/admin/setting/profile': typeof adminAdminSettingProfileRoute
  '/(admin)/admin/user/': typeof adminAdminUserIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/recent'
    | '/trash'
    | '/admin/admin'
    | '/admin/user'
    | '/folder/$id'
    | '/setting/profile'
    | '/admin'
    | '/admin/$id/edit'
    | '/admin/setting/profile'
    | '/admin/user/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/recent'
    | '/trash'
    | '/admin/admin'
    | '/folder/$id'
    | '/setting/profile'
    | '/admin'
    | '/admin/$id/edit'
    | '/admin/setting/profile'
    | '/admin/user'
  id:
    | '__root__'
    | '/(admin)'
    | '/(auth)'
    | '/(user)'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(user)/recent'
    | '/(user)/trash'
    | '/(user)/'
    | '/(admin)/admin/admin'
    | '/(admin)/admin/user'
    | '/(user)/folder/$id'
    | '/(user)/setting/profile'
    | '/(admin)/admin/'
    | '/(admin)/admin/$id/edit'
    | '/(admin)/admin/setting/profile'
    | '/(admin)/admin/user/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  adminRouteRoute: typeof adminRouteRouteWithChildren
  authRouteRoute: typeof authRouteRouteWithChildren
  userRouteRoute: typeof userRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  adminRouteRoute: adminRouteRouteWithChildren,
  authRouteRoute: authRouteRouteWithChildren,
  userRouteRoute: userRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(admin)",
        "/(auth)",
        "/(user)"
      ]
    },
    "/(admin)": {
      "filePath": "(admin)/route.tsx",
      "children": [
        "/(admin)/admin/admin",
        "/(admin)/admin/user",
        "/(admin)/admin/",
        "/(admin)/admin/$id/edit",
        "/(admin)/admin/setting/profile"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/login",
        "/(auth)/register"
      ]
    },
    "/(user)": {
      "filePath": "(user)/route.tsx",
      "children": [
        "/(user)/recent",
        "/(user)/trash",
        "/(user)/",
        "/(user)/folder/$id",
        "/(user)/setting/profile"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx",
      "parent": "/(auth)"
    },
    "/(user)/recent": {
      "filePath": "(user)/recent.tsx",
      "parent": "/(user)"
    },
    "/(user)/trash": {
      "filePath": "(user)/trash.tsx",
      "parent": "/(user)"
    },
    "/(user)/": {
      "filePath": "(user)/index.tsx",
      "parent": "/(user)"
    },
    "/(admin)/admin/admin": {
      "filePath": "(admin)/admin/admin.tsx",
      "parent": "/(admin)"
    },
    "/(admin)/admin/user": {
      "filePath": "(admin)/admin/user.tsx",
      "parent": "/(admin)",
      "children": [
        "/(admin)/admin/user/"
      ]
    },
    "/(user)/folder/$id": {
      "filePath": "(user)/folder.$id.tsx",
      "parent": "/(user)"
    },
    "/(user)/setting/profile": {
      "filePath": "(user)/setting.profile.tsx",
      "parent": "/(user)"
    },
    "/(admin)/admin/": {
      "filePath": "(admin)/admin/index.tsx",
      "parent": "/(admin)"
    },
    "/(admin)/admin/$id/edit": {
      "filePath": "(admin)/admin/$id.edit.tsx",
      "parent": "/(admin)"
    },
    "/(admin)/admin/setting/profile": {
      "filePath": "(admin)/admin/setting.profile.tsx",
      "parent": "/(admin)"
    },
    "/(admin)/admin/user/": {
      "filePath": "(admin)/admin/user.index.tsx",
      "parent": "/(admin)/admin/user"
    }
  }
}
ROUTE_MANIFEST_END */
