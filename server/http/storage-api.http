@baseUrl = http://localhost:5000/api

//=============================================================================
// AUTHORIZATION - Set your access token here
//=============================================================================
@accessToken = your_access_token_here

//=============================================================================
// FOLDER OPERATIONS
//=============================================================================

### Create a new folder
# Creates a folder in the specified location
POST {{baseUrl}}/folders
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "My New Folder",
  "parent": null  // null for root, or a folder ID
}

### Get folder contents
# Retrieves files and subfolders in a folder (use root if no ID)
GET {{baseUrl}}/folders/contents
Authorization: Bearer {{accessToken}}

### Get specific folder contents
# Retrieves files and subfolders in the specified folder
GET {{baseUrl}}/folders/contents/5f8e973e8c2c491f9c5b6fdb
Authorization: Bearer {{accessToken}}

### Rename a folder
POST {{baseUrl}}/folders/5f8e973e8c2c491f9c5b6fdb/rename
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "New Folder Name"
}

### Move a folder
POST {{baseUrl}}/folders/5f8e973e8c2c491f9c5b6fdb/move
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "parent": "5f8e973e8c2c491f9c5b6fdc" // The new parent folder ID, or null for root
}

//=============================================================================
// FILE OPERATIONS
//=============================================================================

### Upload files 
# Note: Use UI for testing multipart form uploads
POST {{baseUrl}}/files/upload
Authorization: Bearer {{accessToken}}
# Content-Type: multipart/form-data
# Form fields:
# - files: File(s) to upload
# - folderId: (Optional) Folder to upload to

### Get file by ID
GET {{baseUrl}}/files/5f8e973e8c2c491f9c5b6fdb
Authorization: Bearer {{accessToken}}

### Update file properties
PATCH {{baseUrl}}/files/5f8e973e8c2c491f9c5b6fdb
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "Updated File Name",
  "isPinned": true
}

### Rename a file
POST {{baseUrl}}/files/5f8e973e8c2c491f9c5b6fdb/rename
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "Renamed File"
}

### Move a file
POST {{baseUrl}}/files/5f8e973e8c2c491f9c5b6fdb/move
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "folder": "5f8e973e8c2c491f9c5b6fdc" // or null for root
}

//=============================================================================
// TRASH OPERATIONS
//=============================================================================

### Move file to trash (soft delete)
DELETE {{baseUrl}}/files/5f8e973e8c2c491f9c5b6fdb
Authorization: Bearer {{accessToken}}

### Move folder to trash (soft delete)
DELETE {{baseUrl}}/folders/5f8e973e8c2c491f9c5b6fdb
Authorization: Bearer {{accessToken}}

### Get trash contents
GET {{baseUrl}}/folders/trash/contents
Authorization: Bearer {{accessToken}}

### Restore file from trash
POST {{baseUrl}}/files/5f8e973e8c2c491f9c5b6fdb/restore
Authorization: Bearer {{accessToken}}

### Restore folder from trash
POST {{baseUrl}}/folders/5f8e973e8c2c491f9c5b6fdb/restore
Authorization: Bearer {{accessToken}}

### Permanently delete file
DELETE {{baseUrl}}/files/5f8e973e8c2c491f9c5b6fdb/permanent
Authorization: Bearer {{accessToken}}

### Permanently delete folder
DELETE {{baseUrl}}/folders/5f8e973e8c2c491f9c5b6fdb/permanent
Authorization: Bearer {{accessToken}}

### Empty trash (delete everything in trash)
POST {{baseUrl}}/folders/trash/empty
Authorization: Bearer {{accessToken}}
